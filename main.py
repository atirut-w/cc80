#!/usr/bin/env python3
import os.path
from argparse import ArgumentParser, Namespace
from io import TextIOWrapper

from pycparser import parse_file
from pycparser.c_ast import *
from pycparser.plyparser import ParseError


class Compiler:
    def __init__(self, ast: FileAST):
        self.output: TextIOWrapper
        self.ast: FileAST = ast

        self.text: list[FuncDef] = []
        self.data: list[Decl] = []
        self.rodata: list[Decl] = []
        self.bss: list[Decl] = []
    
    def write(self, s: str):
        self.output.write(s)

    def writetab(self, s: str):
        self.write("\t" + s)

    def compile(self, output: str):
        self.output = open(output, "w")
        self.write("; " + ("=" * 78) + "\n")
        self.write("; Generated by CC80. Use with Z88DK assembler.\n")
        self.write("; " + ("=" * 78) + "\n")

        # Gather all the stuff into their respective sections
        for ext in self.ast.ext:
            if isinstance(ext, FuncDef):
                self.text.append(ext)
            elif isinstance(ext, Decl):
                if ext.init == None:
                    self.bss.append(ext)
                elif "const" in ext.quals:
                    self.rodata.append(ext)
                else:
                    self.data.append(ext)

        self.output.close()


def main(args: Namespace) -> int:
    if os.path.isfile(args.input) == False:
        print(f"File {args.input} does not exist")
        return 1

    ast: FileAST = parse_file(args.input, use_cpp=True)
    compiler = Compiler(ast)
    compiler.compile(args.output)
    return 0


if __name__ == "__main__":
    parser = ArgumentParser(prog="CC80", description="C to Z80 ASM compiler")
    parser.add_argument("input", help="Input file")
    parser.add_argument("-o", "--output", help="Output file", default="out.asm")

    exit(main(parser.parse_args()))
